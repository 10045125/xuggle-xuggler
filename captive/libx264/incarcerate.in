#!/bin/sh

# Modify this script to pass the necessary parameters to 
# the configure of the captive package you're configuring
prefix="@prefix@"
exec_prefix="@exec_prefix@"
X264_OPTIONS=
LDFLAGS="@LDFLAGS@"
CFLAGS="@CFLAGS@"
YASM="@YASM@"
HOST_TYPE=@HOST_TYPE@
HOST_OS=@HOST_OS@
VS_DEBUG=@VS_DEBUG@

if [ "@VS_CROSS_COMPILE@" = "1" ]; then
  X264_OPTIONS="${X264_OPTIONS} --host=${HOST_OS} --cross-prefix=${HOST_OS}-"
fi

case $HOST_OS in
  *cygwin*)
  CC="${CC} -mno-cygwin"
  LDFLAGS="$LDFLAGS -mno-cygwin"
  ;;
  *)
  ;;
esac

# Tell X264 about the captive libraries already built and fake
# installed

X264_OPTIONS="$X264_OPTIONS --enable-shared"
if test ! "x$VS_DEBUG" = "x"; then
  echo "Creating debug version of libx264: $VS_DEBUG"
  X264_OPTIONS="$X264_OPTIONS --disable-asm"
  X264_OPTIONS="$X264_OPTIONS --enable-debug"
else
  echo "Creating release version of libx264: $VS_DEBUG"
fi

if test "x$YASM" = "x"; then
# no assembly for us :(
  X264_OPTIONS="$X264_OPTIONS --disable-asm"
fi

# X264, despite claiming it, does not support in-tree builds,
# and so we copy the entire source
# directory to the build directory, and then build in place.
echo "Copying @abs_srcdir@/csrc to @abs_builddir@/csrc"
# create the directory
mkdir -p "@abs_builddir@/csrc"
# copy over all the source
cp -r "@abs_srcdir@/csrc/"* "@abs_builddir@/csrc/"
# and make everything user writeable so distcheck will pass
chmod -R u+w "@abs_builddir@/csrc/"*

echo "Configuring X264 with these options: $X264_OPTIONS"
PATH="$PATH:@abs_top_builddir@@bindir@@" bash @abs_builddir@/csrc/configure \
  --extra-cflags="$CFLAGS -I'@abs_top_builddir@@includedir@'" \
  --extra-ldflags="$LDFLAGS -L'@abs_top_builddir@@libdir@'" \
  --prefix="${prefix}" $X264_OPTIONS || \
  (echo "Could not configure library: \"@abs_srcdir@\"; you may want to try disabling it or installing your own version" && exit 1)
